<!--
***********************************************************************************************
Samsung.Tizen.Sdk.Packaging.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) Samsung All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" >

  <UsingTask AssemblyFile="$(_TizenTaskAssemblyName)" TaskName="Samsung.Tizen.Build.Tasks.Package" />
  <UsingTask AssemblyFile="$(_TizenTaskAssemblyName)" TaskName="Samsung.Tizen.Build.Tasks.GetManifestInfo" />
  <UsingTask AssemblyFile="$(_TizenTaskAssemblyName)" TaskName="Samsung.Tizen.Build.Tasks.Sign" />
  <UsingTask AssemblyFile="$(_TizenTaskAssemblyName)" TaskName="Samsung.Tizen.Build.Tasks.FindPatternInList"/>
  <UsingTask AssemblyFile="$(_TizenTaskAssemblyName)" TaskName="Samsung.Tizen.Build.Tasks.MergeManifest" />
  <UsingTask AssemblyFile="$(_TizenTaskAssemblyName)" TaskName="Samsung.Tizen.Build.Tasks.GetTizenProject" />
  <UsingTask AssemblyFile="$(_TizenTaskAssemblyName)" TaskName="Samsung.Tizen.Build.Tasks.ResourceXmlWriter" />

  <PropertyGroup>
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
    <TizenCreateTpkOnBuild Condition="'$(TizenCreateTpkOnBuild)' == '' and '$(OutputType)' == 'Exe'">true</TizenCreateTpkOnBuild>
    <TizenPackageOutputPath>$(OutputPath)tpkroot\</TizenPackageOutputPath>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <TizenTpkUserIncludeFiles>
      <TizenTpkFileName></TizenTpkFileName>
      <TizenTpkSubDir></TizenTpkSubDir>
    </TizenTpkUserIncludeFiles>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <TpkKeepMeta>
      TizenTpkFileName;
      TizenTpkSubDir;
      TizenTpkSubPath;
      TizenTpkIsManifest;
      TizenTpkIsBaseManifest;
    </TpkKeepMeta>
  </PropertyGroup>

  <!--
  ============================================================
  TizenPackageDependsOn

  Defines the set of targets that tpk packaging is directly dependent on.
  ============================================================
  -->
  <PropertyGroup>
    <TizenPackageDependsOn>
      TizenResolveTpkPackageFiles;
      TizenPrePackageEvent;
      _TizenPrepareTpkPackage;
      _TizenTpkSign;
      TizenPostPackageEvent;
    </TizenPackageDependsOn>
  </PropertyGroup>

  <!--
  ===========================================================================
  _UsePlatformManifestsAlways

  TPK must exclude the assets provided by platform.
  ===========================================================================
  -->
  <Target Name="_UsePlatformManifestsAlways" DependsOnTargets="ResolveTargetingPackAssets" BeforeTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <PackageConflictPlatformManifests Include="@(PlatformManifestsFromTargetingPacks)" />
    </ItemGroup>
  </Target>

  <!--
  ===========================================================================
  TizenPackage

  The tpk sign & package entry point.
  1. It can be triggered after Build target (ex : dotnet build)
  2. It can be triggered by calling target (ex : dotnet msbuild /t:TizenPackage)
  ===========================================================================
  -->
  <Target Name="TizenPackage"
          Condition="'$(TizenCreateTpkOnBuild)' == 'true' And '$(TargetFramework)' != ''"
          DependsOnTargets="$(TizenPackageDependsOn)" />

  <!--
  ===========================================================================
  TizenClean

  Delete all intermediate (Default : tpkroot) and final build outputs(*.tpk).
  ===========================================================================
  -->
  <Target Name="TizenClean"
          Condition="'$(TizenCreateTpkOnBuild)' == 'true'"
          AfterTargets="Clean"
          DependsOnTargets="_TizenClean;" />

  <!--
  ============================================================
  TizenPrePackageEvent
  ============================================================
  -->
  <Target Name="TizenPrePackageEvent" />

  <!--
  ============================================================
  TizenPostPackageEvent
  ============================================================
  -->
  <Target Name="TizenPostPackageEvent" />

  <!--
  ===========================================================================
  _TizenClean

  Clean TizenPackageOutputPath Direcotry (Default : tpkroot)
  ===========================================================================
  -->
  <Target Name="_TizenClean">
    <RemoveDir Directories="$(TizenPackageOutputPath)" Condition="Exists('$(TizenPackageOutputPath)')"/>
    <ItemGroup>
      <TpkFiles Include="$(OutDir)\*.tpk" />
    </ItemGroup>
    <Delete Files="@(TpkFiles)" />
  </Target>

  <!--
  ===========================================================================
  _TizenGetTpkInfoFromManifest
  ===========================================================================
  -->
  <Target Name="_TizenGetTpkInfoFromManifest"
          Condition="'$(WebProject)' != 'true' And '$(TizenCreateTpkOnBuild)' == 'true'">

    <Error Code="TS0001"
           File="$(MSBuildProjectFile)"
           Text="The manifest file '$(TizenManifestFile)' was not found."
           Condition="!Exists('$(TizenManifestFile)')"/>

    <GetManifestInfo ManifestFilePath="$(TizenManifestFile)"
                     Condition="Exists('$(TizenManifestFile)')">
      <Output TaskParameter="PackageName" PropertyName="TizenPackageName" />
      <Output TaskParameter="PackageVersion" PropertyName="TizenPackageVersion" />
      <Output TaskParameter="ApplicationList" ItemName="TizenPackageApplicationList" />
      <Output TaskParameter="FirstApplication" ItemName="TizenPackageFirstApplication" />
    </GetManifestInfo>
  </Target>

  <!--
  ===========================================================================
  _TizenResolveTpkPackageName
  ===========================================================================
  -->
  <Target Name="_TizenResolveTpkPackageName" DependsOnTargets="_TizenGetTpkInfoFromManifest">
    <PropertyGroup>
      <TpkFileExt>.tpk</TpkFileExt>
      <SignedTpkFile>$(OutputPath)$(TizenPackageName)</SignedTpkFile>
      <SignedTpkFile>$(SignedTpkFile)-$(TizenPackageVersion)</SignedTpkFile>
      <SignedTpkFile>$(SignedTpkFile)$(TpkFileExt)</SignedTpkFile>
    </PropertyGroup>
  </Target>

  <!--
  ===========================================================================
  TizenCheckExecFileExist
  ===========================================================================
  -->
  <Target Name="TizenCheckExecFileExist" DependsOnTargets="_TizenGetTpkInfoFromManifest">
    <ItemGroup>
      <_TizenPackageExecItemList Include="%(TizenPackageApplicationList.Exec)" />
      <_TizenPackageExecItemList Remove="%(TizenTpkAssemblyFiles.Filename)%(TizenTpkAssemblyFiles.Extension)" />
    </ItemGroup>
    <Message Text="$(TizenManifestFile) exec file check OK"
             Condition="@(_TizenPackageExecItemList->Count()) == 0" />
    <Error Code="TS0002"
           File="$(TizenManifestFile)"
           Text="The '%(_TizenPackageExecItemList.Identity)' file was not found.&#xA;Please check the exec attribute of $(TizenManifestFile) or check the assembly name"
           Condition="@(_TizenPackageExecItemList->Count()) != 0" />
  </Target>

  <!--
  ===========================================================================
  TizenComputeTpkAssemblyFiles
  ===========================================================================
  -->
  <Target Name="TizenComputeTpkAssemblyFiles" DependsOnTargets="ComputeFilesToPublish" Condition="'$(WebProject)' != 'true'">
    <PropertyGroup>
      <PublishDepsFile>$(OutDir)$(ProjectDepsFileName)</PublishDepsFile>
    </PropertyGroup>
    <ItemGroup>
      <!-- Copy all the assemblies -->
      <TizenTpkAssemblyFiles Include="@(ResolvedFileToPublish)" KeepMetadata="$(TpkKeepMeta)" Condition="'%(RelativePath)' != '$(ProjectDepsFileName)'">
        <TizenTpkSubDir>bin\</TizenTpkSubDir>
        <TizenTpkFileName>%(RelativePath)</TizenTpkFileName>
      </TizenTpkAssemblyFiles>
      <!-- Copy Current Projects deps.json to tpk root folder -->
      <TizenTpkAssemblyFiles Include="$(PublishDepsFile)" Condition="Exists('$(PublishDepsFile)')" KeepMetadata="$(TpkKeepMeta)">
        <TizenTpkFileName>$(MSBuildProjectName).deps.json</TizenTpkFileName>
      </TizenTpkAssemblyFiles>
    </ItemGroup>
    <Message Condition="!Exists('$(PublishDepsFile)')" Text="PublishDepsFile : Unable to copy $(PublishDepsFile). File does not exist." Importance="high"/>
  </Target>

  <!--
  ===========================================================================
  TizenComputeTpkResourceFiles
  ===========================================================================
  -->
  <Target Name="TizenComputeTpkResourceFiles" Returns="@(AllTpkItemsFullPath)">
    <!-- Get TizenProject from reference projects -->
    <GetTizenProject ProjectFiles="@(_MSBuildProjectReferenceExistent)"
                     Condition="'@(_MSBuildProjectReferenceExistent)' != '' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and '$(SupportMultiAppPackage)' != 'false'">
      <Output TaskParameter="TizenProjectFiles" ItemName="_TizenProjectFiles"/>
    </GetTizenProject>

    <!-- Get TpkFiles from reference tizen projects -->
    <MSBuild Projects="@(_TizenProjectFiles)"
             Condition="'@(_TizenProjectFiles)' != '' and '%(_TizenProjectFiles.Private)' != 'false'"
             Targets="TizenComputeTpkResourceFiles"
             BuildInParallel="$(BuildInParallel)"
             Properties="%(_TizenProjectFiles.SetConfiguration); %(_TizenProjectFiles.SetPlatform); %(_TizenProjectFiles.SetTargetFramework)"
             ContinueOnError="WarnAndContinue"
             RemoveProperties="%(_TizenProjectFiles.GlobalPropertiesToRemove)">

      <Output TaskParameter="TargetOutputs" ItemName="_AllTpkItemsFullPath"/>
    </MSBuild>

    <!-- Target outputs must be full paths because they will be consumed by a different project. -->
    <ItemGroup>
      <TizenTpkFiles KeepDuplicates="false"
                     KeepMetadata="$(TpkKeepMeta)"
                     Include="@(_AllTpkItemsFullPath->'%(FullPath)')" />
      <TizenTpkFiles Update="@(TizenTpkFiles)"
                     Condition=" '%(TizenTpkFiles.TizenTpkIsManifest)' == 'true' " >
        <TizenTpkIsBaseManifest>false</TizenTpkIsBaseManifest><!-- reference manifest should not be TizenTpkIsBaseManifest -->
      </TizenTpkFiles>
    </ItemGroup>

    <!-- Remove items which we will never again use - they just sit around taking up memory otherwise -->
    <ItemGroup>
      <_AllTpkItemsFullPath Remove="@(_AllTpkItemsFullPath)"/>
      <_TizenProjectFiles Remove ="@(_TizenProjectFiles)" />
    </ItemGroup>

    <!-- Default Resource File Include from Project -->
    <ItemGroup Condition=" '$(EnableDefaultTizenItems)' == 'true' ">
      <TizenTpkFiles Include="@(TizenResource)" Condition="Exists('%(TizenResource.Identity)')">
        <TizenTpkSubDir>res\%(TizenResource.RecursiveDir)</TizenTpkSubDir>
        <TizenTpkFileName>%(Filename)%(Extension)</TizenTpkFileName>
      </TizenTpkFiles>
      <TizenTpkFiles Include="@(TizenLibrary)" Condition="Exists('%(TizenLibrary.Identity)')">
        <TizenTpkSubDir>lib\%(TizenLibrary.RecursiveDir)</TizenTpkSubDir>
        <TizenTpkFileName>%(Filename)%(Extension)</TizenTpkFileName>
      </TizenTpkFiles>
      <TizenTpkFiles Include="@(TizenSharedResource)" Condition="Exists('%(TizenSharedResource.Identity)')">
        <TizenTpkSubDir>shared\%(TizenSharedResource.RecursiveDir)</TizenTpkSubDir>
        <TizenTpkFileName>%(Filename)%(Extension)</TizenTpkFileName>
      </TizenTpkFiles>
      <TizenTpkFiles Include="$(TizenManifestFile)" Condition="Exists('$(TizenManifestFile)')">
        <TizenTpkFileName>%(Filename)%(Extension)</TizenTpkFileName>
        <TizenTpkIsManifest>true</TizenTpkIsManifest>
        <TizenTpkIsBaseManifest>true</TizenTpkIsBaseManifest>
      </TizenTpkFiles>
      <TizenTpkFiles Include="@(TizenTpkUserIncludeFiles)" Exclude="@(TizenTpkUserExcludeFiles)">
        <TizenTpkSubDir Condition="'%(TizenTpkUserIncludeFiles.TizenTpkSubDir)' == ''">%(TizenTpkUserIncludeFiles.RelativeDir)</TizenTpkSubDir>
        <TizenTpkFileName Condition="'%(TizenTpkUserIncludeFiles.TizenTpkFileName)' == ''">%(Filename)%(Extension)</TizenTpkFileName>
      </TizenTpkFiles>
    </ItemGroup>

    <ItemGroup>
      <!--
      First, add a trailing slash to the TizenTpkSubDir metadata if necessary.
      This allows us to use the same value for the TizenTpkSubPath metadata whether or not TizenTpkSubDir metadata is set:
      %(TizenTpkFiles.TizenTpkSubDir)%(TizenTpkFiles.TizenTpkFileName)
      Note that RecursiveDir already includes the trailing slash.
      -->
      <TizenTpkFiles Update="@(TizenTpkFiles)">
        <TizenTpkSubDir Condition="'%(TizenTpkFiles.TizenTpkSubDir)' != ''">$([MSBuild]::EnsureTrailingSlash(%(TizenTpkFiles.TizenTpkSubDir)))</TizenTpkSubDir>
        <!-- If path contain '..\' without TizenTpkSubDir then TizenTpkSubDir will be set '' -->
        <TizenTpkSubDir Condition="'%(TizenTpkFiles.TizenTpkSubDir)' != '' and $([System.String]::new('%(TizenTpkFiles.TizenTpkSubDir)').Contains('..\'))"></TizenTpkSubDir>
      </TizenTpkFiles>
    </ItemGroup>

    <!-- Item to Return  -->
    <ItemGroup>
      <AllTpkItemsFullPath Include="@(TizenTpkFiles->'%(FullPath)')"/>
    </ItemGroup>

    <Message Text="TizenTpkFiles : %(TizenTpkFiles.Identity)" Importance="high"/>
  </Target>

  <!--
  ===========================================================================
  ClearReferenceCopyLocalPaths if SupportMultiAppPackage is set to false in csproj
  ===========================================================================
  -->
  <Target Name="ClearReferenceCopyLocalPaths" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'$(SupportMultiAppPackage)' == 'false'"/>
    </ItemGroup>
  </Target>

  <!--
  ===========================================================================
  TizenComputeTpkPackageFiles
  ===========================================================================
  -->
  <Target Name="TizenComputeTpkPackageFiles" DependsOnTargets="ClearReferenceCopyLocalPaths;_TizenGenerateResourceXmlFile;TizenComputeTpkAssemblyFiles;TizenComputeTpkResourceFiles">
    <ItemGroup>
      <!-- Add AssemblyFiles -->
      <TizenResolvedFileToTpk Include="@(TizenTpkAssemblyFiles)" KeepMetadata="$(TpkKeepMeta)">
        <TizenTpkSubPath>%(TizenTpkAssemblyFiles.TizenTpkSubDir)%(TizenTpkAssemblyFiles.TizenTpkFileName)</TizenTpkSubPath>
      </TizenResolvedFileToTpk>
      <!-- Add ResourceFiles -->
      <TizenResolvedFileToTpk Include="@(TizenTpkFiles)" KeepMetadata="$(TpkKeepMeta)">
        <TizenTpkSubPath>%(TizenTpkFiles.TizenTpkSubDir)%(TizenTpkFiles.TizenTpkFileName)</TizenTpkSubPath>
      </TizenResolvedFileToTpk>
    </ItemGroup>
    <Message Text='Added "%(TizenResolvedFileToTpk.Identity)" to TPK' Condition ="'@(TizenResolvedFileToTpk)' != '' "/>
  </Target>

  <!--
  ===========================================================================
  _TizenExcludeTpkFiles
  ===========================================================================
  -->
  <Target Name="_TizenExcludeTpkFiles">
    <!-- Exclude TizenTpkUserExcludeFiles -->
    <PropertyGroup>
      <_TizenTpkUserExcludeFiles>;@(TizenTpkUserExcludeFiles);</_TizenTpkUserExcludeFiles>
    </PropertyGroup>
    <ItemGroup>
      <_TizenTpkUserExcludeFilesToRemove Include="@(TizenResolvedFileToTpk)" Condition=" $(_TizenTpkUserExcludeFiles.Contains('%(TizenResolvedFileToTpk.Filename)%(TizenResolvedFileToTpk.Extension)'))" />
      <TizenResolvedFileToTpk Remove="@(_TizenTpkUserExcludeFilesToRemove)" />
    </ItemGroup>

    <!-- Exclude TizenTpkExcludePattern -->
    <FindPatternInList Condition="'$(TizenTpkExcludePattern)' != ''" List="@(TizenResolvedFileToTpk)" Patterns="$(TizenTpkExcludePattern)">
      <Output TaskParameter="MatchList" ItemName="_TizenTpkPatternExcludeFilesToRemove" />
    </FindPatternInList>
    <FindPatternInList Condition="'$(TizenTpkExcludePattern)' != '' and '$(TizenTpkNotExcludePattern)' != ''"
                       List="@(_TizenTpkPatternExcludeFilesToRemove)" Patterns="$(TizenTpkNotExcludePattern)">
      <Output TaskParameter="MatchList" ItemName="_TizenTpkPatternExcludeFilesToKeep" />
    </FindPatternInList>
    <ItemGroup>
      <_TizenTpkPatternExcludeFilesToRemove Remove="@(_TizenTpkPatternExcludeFilesToKeep)"/>
      <TizenResolvedFileToTpk Remove="@(_TizenTpkPatternExcludeFilesToRemove)" />
    </ItemGroup>

    <!-- Exclude Unused Runtime Assets -->
    <ItemGroup>
      <TizenResolvedFileToTpk Remove="@(TizenResolvedFileToTpk)"
                              Condition="$([System.String]::Copy('%(TizenTpkSubPath)').StartsWith('bin\runtimes\win'))" />
      <TizenResolvedFileToTpk Remove="@(TizenResolvedFileToTpk)"
                              Condition="$([System.String]::Copy('%(TizenTpkSubPath)').StartsWith('bin\runtimes\osx'))" />
    </ItemGroup>
  </Target>


  <!--
  ===========================================================================
  TizenResolveTpkPackageFiles
  ===========================================================================
  -->
  <Target Name="TizenResolveTpkPackageFiles"
          DependsOnTargets="TizenComputeTpkPackageFiles;_TizenExcludeTpkFiles">
    <Message Text='From : "%(TizenResolvedFileToTpk.Identity)"&#xA;  To : "%(TizenResolvedFileToTpk.TizenTpkSubPath)"'
             Condition ="'@(TizenResolvedFileToTpk)' != '' "/>
  </Target>

  <!--
  ===========================================================================
  TizenIncrementalClean
  ===========================================================================
  -->
  <Target Name="TizenIncrementalClean" AfterTargets="IncrementalClean"
          DependsOnTargets="_TizenResolveTpkPackageName;TizenResolveTpkPackageFiles">
    <ReadLinesFromFile File="$(IntermediateOutputPath)Tizen$(CleanFile)">
      <Output TaskParameter="Lines" ItemName="_TizenCleanUnfilteredPriorFileWrites" />
    </ReadLinesFromFile>
    <RemoveDuplicates Inputs="@(_TizenCleanUnfilteredPriorFileWrites)">
      <Output TaskParameter="Filtered" ItemName="_TizenCleanUnfilteredPriorFileWritesNoDup" />
    </RemoveDuplicates>
    <ConvertToAbsolutePath Paths="@(TizenResolvedFileToTpk->'$(TizenPackageOutputPath)%(TizenTpkSubPath)')">
      <Output TaskParameter="AbsolutePaths" ItemName="_ResolveTizenResolvedFilekFileWritesAbs" />
    </ConvertToAbsolutePath>
    <ConvertToAbsolutePath Paths="$(SignedTpkFile)">
      <Output TaskParameter="AbsolutePaths" ItemName="_ResolveTizenResolvedFilekFileWritesAbs" />
    </ConvertToAbsolutePath>
    <ItemGroup>
      <_TizenCleanPriorFileWrites Include="@(_TizenCleanUnfilteredPriorFileWritesNoDup)" Exclude="@(_ResolveTizenResolvedFilekFileWritesAbs)" />
    </ItemGroup>

    <!-- If there are some exclude files on TPK file, then it should be delete tpks to repackaging -->
    <Delete Files="$(SignedTpkFile)"
            TreatErrorsAsWarnings="true"
            Condition="'@(_TizenCleanPriorFileWrites->Count())' &gt; 0">
    </Delete>
    <Delete Files="@(_TizenCleanPriorFileWrites)"
            TreatErrorsAsWarnings="true">
      <Output TaskParameter="DeletedFiles" ItemName="__TizenCleanPriorFileWritesDeleted" />
    </Delete>
    <WriteLinesToFile File="$(IntermediateOutputPath)Tizen$(CleanFile)"
                      Lines="@(_ResolveTizenResolvedFilekFileWritesAbs)"
                      Overwrite="true" />
  </Target>

  <!--
  ===========================================================================
  TizenCreateTpkDirectoryStructure
  ===========================================================================
  -->
  <Target Name="TizenCreateTpkDirectoryStructure">
    <MakeDir Directories = "$(TizenPackageOutputPath)" Condition = "!Exists('$(TizenPackageOutputPath)')" />
    <MakeDir Directories = "$(TizenPackageOutputPath)bin" Condition = "!Exists('$(TizenPackageOutputPath)bin')" />
    <MakeDir Directories = "$(TizenPackageOutputPath)lib" Condition = "!Exists('$(TizenPackageOutputPath)lib')" />
    <MakeDir Directories = "$(TizenPackageOutputPath)res" Condition = "!Exists('$(TizenPackageOutputPath)res')" />
    <MakeDir Directories = "$(TizenPackageOutputPath)shared" Condition = "!Exists('$(TizenPackageOutputPath)shared')" />
    <MakeDir Directories = "$(TizenPackageOutputPath)shared\res" Condition = "!Exists('$(TizenPackageOutputPath)shared\res')" />
  </Target>

  <!--
  ===========================================================================
  _TizenGenerateResourceXmlFile
  ===========================================================================
  -->
  <Target Name="_TizenGenerateResourceXmlFile">
    <ResourceXmlWriter
                   ProjectFullName="$(MSBuildProjectDirectory)"
                   LangCountryListXmlPath="$(MSBuildThisFileDirectory)..\tools\">
      <Output TaskParameter="ResourceXmlPath" PropertyName="_TizenResourceXmlPath" />
    </ResourceXmlWriter>
    <ItemGroup>
      <TizenResource Include="$(_TizenResourceXmlPath)" />
    </ItemGroup>
  </Target>

  <!--
  ===========================================================================
  TizenManifestMergeAndCopy
  ===========================================================================
  -->
  <Target Name="TizenManifestMergeAndCopy">
    <ItemGroup>
      <BaseManifest Include="@(TizenResolvedFileToTpk)"
                    Condition="'%(TizenResolvedFileToTpk.TizenTpkIsManifest)' == 'true' and '%(TizenResolvedFileToTpk.TizenTpkIsBaseManifest)' == 'true'"/>

      <SubManifest Include="@(TizenResolvedFileToTpk)"
                   Condition="'%(TizenResolvedFileToTpk.TizenTpkIsManifest)' == 'true' and '%(TizenResolvedFileToTpk.TizenTpkIsBaseManifest)' != 'true'"/>
    </ItemGroup>

    <!-- If manifest file is multiple, merge manifest -->
    <MergeManifest Condition="@(SubManifest->Count()) > 0"
                   MainManifestFile="%(BaseManifest.Identity)"
                   SubManifestFileList="@(SubManifest)"
                   ResultManifestFile="$(TizenPackageOutputPath)tizen-manifest.xml"/>

    <!-- If manifest file count is only one, copy manifest -->
    <Copy SourceFiles="@(TizenResolvedFileToTpk)"
          DestinationFiles="@(TizenResolvedFileToTpk->'$(TizenPackageOutputPath)tizen-manifest.xml')"
          Condition="@(SubManifest->Count()) == 0 and '%(TizenResolvedFileToTpk.TizenTpkIsManifest)' == 'true' "
          OverwriteReadOnlyFiles="true"
          Retries="10">
      <Output TaskParameter="DestinationFiles" ItemName="TpkFileWrites" />
    </Copy>
  </Target>

  <!--
  ===========================================================================
  _TizenPrepareTpkPackage

  1. Publish Assembly to PublishDir
  2. Copy bin/res/lib/shared resource to TizenPackageOutputPath (Default : tpkroot)
  3. Remove tpk files
  ===========================================================================
  -->
  <Target Name="_TizenPrepareTpkPackage"
          DependsOnTargets="_TizenResolveTpkPackageName;
                            TizenResolveTpkPackageFiles;
                            TizenCreateTpkDirectoryStructure;
                            TizenManifestMergeAndCopy"
          Inputs="@(TizenResolvedFileToTpk)"
          Outputs="@(TizenResolvedFileToTpk->'$(TizenPackageOutputPath)%(TizenTpkSubPath)')">
    <Copy SourceFiles="@(TizenResolvedFileToTpk)"
          DestinationFiles="@(TizenResolvedFileToTpk->'$(TizenPackageOutputPath)%(TizenTpkSubPath)')"
          Condition="'%(TizenResolvedFileToTpk.TizenTpkIsManifest)' != 'true' "
          OverwriteReadOnlyFiles="true"
          Retries="10">
      <Output TaskParameter="DestinationFiles" ItemName="TpkFileWrites" />
    </Copy>

    <Delete Files="$(SignedTpkFile)" TreatErrorsAsWarnings="true" />
  </Target>

  <!--
  ===========================================================================
  _TizenTpkSign

  Sign unsigned TPK
  ===========================================================================
  -->
  <Target Name="_TizenTpkSign"
          DependsOnTargets="_TizenResolveTpkPackageName;
                            _TizenPrepareTpkPackage;
                            TizenPrepareCertificate;
                            TizenCheckCertificateChanged"
          Inputs="@(TizenResolvedFileToTpk->'$(TizenPackageOutputPath)%(TizenTpkSubPath)');$(IntermediateOutputPath)TizenAuthorTimeStamp;$(IntermediateOutputPath)TizenDistributorTimeStamp"
          Outputs="$(SignedTpkFile)"
          Condition="'$(WebProject)' != 'true'">

    <CallTarget Targets="TizenCheckExecFileExist" />

    <Error Condition="!Exists('$(AuthorPath)') OR !Exists('$(DistributorPath)')"
           Text="Invalid Tpk Signing resource ... Please check the Properties &#60;AuthorPath&#62; &#61; $(AuthorPath), &#60;DistributorPath&#62; &#61; $(DistributorPath)"/>

    <Sign RootDir="$(TizenPackageOutputPath)"
          AuthorFile="$(AuthorPath)"
          AuthorPassword="$(AuthorPass)"
          DistFile="$(DistributorPath)"
          DistPassword="$(DistributorPass)"
          DistFile2="$(DistributorPath2)"
          DistPassword2="$(DistributorPass2)"
          OutputSignedTpk="$(SignedTpkFile)" />

    <Message Text="Successfully created tpk package : $(SignedTpkFile)" Condition="Exists('$(SignedTpkFile)')"/>
    <Message Text="Failed to create tpk package : $(SignedTpkFile)" Importance="high" Condition="!Exists('$(SignedTpkFile)')"/>
  </Target>

  <!--
  ===========================================================================
  TizenPrintTpkOutput

  Show message of tpk full path
  ===========================================================================
  -->
  <Target Name="TizenPrintTpkOutput" AfterTargets="_TizenTpkSign">
    <Message Condition="Exists('$(SignedTpkFile)')"
             Importance="high"
             Text="$(MSBuildProjectName) -> $([System.IO.Path]::GetFullPath('$(SignedTpkFile)'))" />
  </Target>

  <!--
  ===========================================================================
  TizenPrepareCertificate

  Check Certificate properties & set default certificates
  ===========================================================================
  -->
  <Target Name="TizenPrepareCertificate">
    <PropertyGroup>
      <TizenDefaultAuthorPath>$(MSBuildThisFileDirectory)..\certificate\author_test.p12</TizenDefaultAuthorPath>
      <TizenDefaultAuthorPass>author_test</TizenDefaultAuthorPass>
      <TizenDefaultDistributorPath>$(MSBuildThisFileDirectory)..\certificate\tizen-distributor-signer.p12</TizenDefaultDistributorPath>
      <TizenDefaultDistributorPass>tizenpkcs12passfordsigner</TizenDefaultDistributorPass>
    </PropertyGroup>

    <Message Condition="'$(AuthorPath)'==''"
             Importance="normal"
             Text="AuthorPath property is not set!" />

    <PropertyGroup Condition="'$(AuthorPath)'==''">
      <AuthorPath>$(TizenDefaultAuthorPath)</AuthorPath>
      <AuthorPass>$(TizenDefaultAuthorPass)</AuthorPass>
      <TizenUseDefaultCertificate>true</TizenUseDefaultCertificate>
    </PropertyGroup>

    <Message Condition="'$(DistributorPath)'==''"
             Importance="normal"
             Text="DistributorPath property is not set!" />

    <PropertyGroup Condition="'$(DistributorPath)'==''">
      <DistributorPath>$(TizenDefaultDistributorPath)</DistributorPath>
      <DistributorPass>$(TizenDefaultDistributorPass)</DistributorPass>
      <TizenUseDefaultCertificate>true</TizenUseDefaultCertificate>
    </PropertyGroup>

    <Message Condition="'$(TizenUseDefaultCertificate)'=='true'"
             Importance="high"
             Text="$(MSBuildProjectName) is signed with Default Certificates!" />

    <!--check author file exist -->
    <Error Code="TS0003"
           File="$(MSBuildProjectFile)"
           Text="The author certificate file '$(AuthorPath)' was not found."
           Condition="!Exists('$(AuthorPath)')" />

    <!--check distributor file exist -->
    <Error Code="TS0004"
           File="$(MSBuildProjectFile)"
           Text="The distributor certificate file '$(DistributorPath)' was not found."
           Condition="!Exists('$(DistributorPath)')" />

  </Target>


  <!--
  ===========================================================================
  TizenCheckCertificateChanged

  Check if the certificate was updated and create tpk if certificate was changed.
  ===========================================================================
  -->
  <Target Name="TizenCheckCertificateChanged">
    <!-- Check the Author Certificate Info changed & Save Info -->
    <ReadLinesFromFile File="$(IntermediateOutputPath)TizenAuthorTimeStamp">
      <Output TaskParameter="Lines" ItemName="SignedAuthorHash" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <SignedAuthorHash>@(SignedAuthorHash)</SignedAuthorHash>
      <AuthorHash>$(AuthorPath)_$([System.IO.File]::GetLastWriteTime($(AuthorPath)).Ticks)</AuthorHash>
    </PropertyGroup>
    <WriteLinesToFile Condition="'$(SignedAuthorHash)' != '$(AuthorHash)'"
                      File="$(IntermediateOutputPath)TizenAuthorTimeStamp"
                      Lines="$(AuthorHash)"
                      Overwrite="true" />

    <!-- Check the Distributor Certificate Info changed & Save Info -->
    <ReadLinesFromFile File="$(IntermediateOutputPath)TizenDistributorTimeStamp">
      <Output TaskParameter="Lines" ItemName="SignedDistributorHash" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <SignedDistributorHash>@(SignedDistributorHash)</SignedDistributorHash>
      <DistributorHash>$(DistributorPath)_$([System.IO.File]::GetLastWriteTime($(DistributorPath)).Ticks)</DistributorHash>
    </PropertyGroup>
    <WriteLinesToFile Condition="'$(SignedDistributorHash)' != '$(DistributorHash)'"
                      File="$(IntermediateOutputPath)TizenDistributorTimeStamp"
                      Lines="$(DistributorHash)"
                      Overwrite="true" />
  </Target>

</Project>
